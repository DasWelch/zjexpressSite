{"componentChunkName":"component---src-templates-blog-post-js","path":"/DataStructures-Arrays/","result":{"data":{"site":{"siteMetadata":{"title":"ZJ Express"}},"markdownRemark":{"id":"5488c788-ae79-53fc-9659-55c591e35467","excerpt":"In coding, we regularly run into situations that require us to create groups of “things”. These “things” could be numbers, letters, or even objects. Arrays are…","html":"<p>In coding, we regularly run into situations that require us to create groups of “things”. These “things” could be numbers, letters, or even objects. Arrays are one of the most common ways of handling these situations. They are one of the oldest Data structures and by far the most used.  </p>\n<p>An array is simply a collection of related data. They hold “things” for us to use later. If we were to imagine an array of everyday objects we could think of it as a box with many drawers. In our case we are making the box and drawers, so we can say how long the box will be and how big and deep each drawer will be. If we made an array to hold our collection of thumb drives then we could make a drawer for each drive and make the box big enough to fit a drawer for each drive we have. We can create an array out of just about anything, we just have to plan for the size of the things we want to put into it and the total number of things we’re going to add. </p>\n<p>Now how would this apply to the computer? To move our example onto the computer we need to talk about RAM, our computer’s memory. RAM is a type of storage used by the computer to hold data that the computer needs for tasks that are currently running. For our purposes, our RAM can be pictured as a long shelf with space for us to place our boxes. We can put our box on this shelf anywhere there is room. If we wanted to get something from our box or wanted to look at the whole box we can just go to the place where it was placed. We can do the same thing for each object inside.</p>\n<p>Things do get a bit more complicated when using data and code but the ideas above will give us some intuition. Let us see what I mean by using code. The best way of showing how arrays work is by utilizing C and its direct usage of memory. C is an older language created in the 1970s. It is known for being a very low-level language, in other words, it is talking directly to the computer rather than having a go-between like many other languages. This is important as we can see what is happening inside our machine.</p>\n<p>To see how these arrays are working were going to use variables in c called pointers. pointers allow us to see exactly where something is in memory, I.e. its place on our shelf. Pointers give us an address. This is similar to a home address but it is simply a number. This number is an exact spot in our RAM where the “thing” we’re looking at is located.</p>\n<p>One note is that our array will use a bunch of these addresses so when we see the number from our pointer, that is just the start of where our array is located. Additionally, our drawers will have a certain address in memory where they start. These will be within our array. Each drawer will be a certain number between each other. This is determined by the type of thing we want to store in each drawer. Pointers get complicated fast, but all you need to know is that a pointer points to the start of an object. Well take a look below and create an array to store some numbers and see where they are located in memory.</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;stdio.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* Here we create an array with 10 numbers in it, more specifically integers */</span>\n    <span class=\"token keyword\">int</span> ourArray<span class=\"token punctuation\">[</span> <span class=\"token number\">10</span> <span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> \n    \n    <span class=\"token comment\">/* here we are creating a pointer see. the * next to the word void? That * means this points to an address*/</span>\n    <span class=\"token keyword\">void</span><span class=\"token operator\">*</span> pointerForOurArray <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ourArray<span class=\"token punctuation\">;</span> \n    \n    <span class=\"token comment\">/* these numbers simply help us count in loops */</span>\n    <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">;</span> \n    \n    <span class=\"token comment\">/* printf(...) prints something, here it's the start of our array */</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"our Array starts at: %d or %p in hexadecimal\\n\"</span><span class=\"token punctuation\">,</span>pointerForOurArray<span class=\"token punctuation\">,</span>pointerForOurArray<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">/* bellow were setting or initializing the elements of array */</span>         \n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* setting the value an element */</span>\n        ourArray<span class=\"token punctuation\">[</span> i <span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> \n        \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* below were printing the value and address of each element */</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token number\">10</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* getting the address of our current element */</span>\n        <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> pointer <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>ourArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* printing the value and address of an element */</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span>\n        <span class=\"token string\">\"ourArray[%d] equals %d and it starts at address: %d or %p in hexadecimal\\n\"</span><span class=\"token punctuation\">,</span>\n        j <span class=\"token punctuation\">,</span>\n        ourArray<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">,</span>\n        pointer<span class=\"token punctuation\">,</span>\n        pointer\n        <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The code above will output something like this when run.</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">//our output when run\n$gcc -o main *.c\n$main\nour Array starts at: 695129184 or 0x7ffe296ed460 in hexadecimal\nourArray[0] equals 100 and it starts at address: 695129184 or 0x7ffe296ed460 in hexadecimal\nourArray[1] equals 101 and it starts at address: 695129188 or 0x7ffe296ed464 in hexadecimal\nourArray[2] equals 102 and it starts at address: 695129192 or 0x7ffe296ed468 in hexadecimal\nourArray[3] equals 103 and it starts at address: 695129196 or 0x7ffe296ed46c in hexadecimal\nourArray[4] equals 104 and it starts at address: 695129200 or 0x7ffe296ed470 in hexadecimal\nourArray[5] equals 105 and it starts at address: 695129204 or 0x7ffe296ed474 in hexadecimal\nourArray[6] equals 106 and it starts at address: 695129208 or 0x7ffe296ed478 in hexadecimal\nourArray[7] equals 107 and it starts at address: 695129212 or 0x7ffe296ed47c in hexadecimal\nourArray[8] equals 108 and it starts at address: 695129216 or 0x7ffe296ed480 in hexadecimal\nourArray[9] equals 109 and it starts at address: 695129220 or 0x7ffe296ed484 in hexadecimal</code></pre></div>\n<p>If you want to run this code yourself you can find it <a href=\"http://tpcg.io/pvfMclB3\" target=\"_Blank\">here</a>.</p>\n<p>As we can see each element in our array has a specific address. I have included its number in memory in both decimal(our number system counting using 10 numbers) and hexadecimal (using 16 numbers). Don’t worry if the hexadecimal is confusing, as you dig deeper and deeper into computer science and coding you’ll see that hex is just an easy way to represent numbers the way the computer sees them. For our purposes just notice that each address changes by 4 for each element. This is what we were talking about earlier by setting the type of the array. When we do this we’re telling the computer hey I need 4 bytes of space to store one of these things.</p>\n<p>Now that we know what arrays are, let’s talk about what they are used for. Arrays are used everywhere in programming. They are a fundamental data structure and are used in even the most basic scripts. Arrays are great because they are indexed. Indexed means that each “thing” or element in the array gets a number associated with it. Usually, these numbers start at 0 and go up to one minus the size of the array(in our example 0 to 9 for our 10 elements). This indexing allows us to grab any one element very very quickly. Faster than many other data structures, as long as we know its index number. This makes arrays great if we have sorted or ordered data. Such as a list of names in alphabetical order or a set of thumb drives sorted by most space to least. They can also be helpful if we just want to access any one element from that array at a time. If we want to go through the whole array there may be better solutions.</p>\n<p>To wrap things up, arrays are a type of data structure used to store sets to similar data. We can think of an array as a box with drawers.  Each drawer is a specific size to hold a specific type of item. In the computer, the array is a set of data at a specific address in memory. Each item or element has a specific address too. We want to use arrays when we have ordered data or when we want to access only one element from our array at a time rather than reading the whole thing. </p>\n<p>The Arrays we have talked about do have some downfalls. The main being that we have to know how many elements were going to add at the time of creating the array. We cannot change the size of an array once created.  As you program more you may notice that some higher-level languages do allow for resizing and change of arrays. Next time we will speak about a data structure called a dynamic array. These are an array implementation that allows us to resize our array on the fly and add and remove elements as needed. </p>","frontmatter":{"title":"Arrays - Data Structures","date":"May 01, 2015","description":"Arrays, what they are, how they work, and why their important"},"fileRelativePath":"/content/blog/DataStructures-Arrays/index.md","rawFrontmatter":"{\"title\":\"Arrays - Data Structures\",\"date\":\"2015-05-01T22:12:03.284Z\",\"description\":\"Arrays, what they are, how they work, and why their important\",\"publish\":true,\"tags\":\"DataStructures, Arrays\"}","rawMarkdownBody":"In coding, we regularly run into situations that require us to create groups of \"things\". These \"things\" could be numbers, letters, or even objects. Arrays are one of the most common ways of handling these situations. They are one of the oldest Data structures and by far the most used.  \n\nAn array is simply a collection of related data. They hold \"things\" for us to use later. If we were to imagine an array of everyday objects we could think of it as a box with many drawers. In our case we are making the box and drawers, so we can say how long the box will be and how big and deep each drawer will be. If we made an array to hold our collection of thumb drives then we could make a drawer for each drive and make the box big enough to fit a drawer for each drive we have. We can create an array out of just about anything, we just have to plan for the size of the things we want to put into it and the total number of things we're going to add. \n\nNow how would this apply to the computer? To move our example onto the computer we need to talk about RAM, our computer's memory. RAM is a type of storage used by the computer to hold data that the computer needs for tasks that are currently running. For our purposes, our RAM can be pictured as a long shelf with space for us to place our boxes. We can put our box on this shelf anywhere there is room. If we wanted to get something from our box or wanted to look at the whole box we can just go to the place where it was placed. We can do the same thing for each object inside.\n\nThings do get a bit more complicated when using data and code but the ideas above will give us some intuition. Let us see what I mean by using code. The best way of showing how arrays work is by utilizing C and its direct usage of memory. C is an older language created in the 1970s. It is known for being a very low-level language, in other words, it is talking directly to the computer rather than having a go-between like many other languages. This is important as we can see what is happening inside our machine.\n\nTo see how these arrays are working were going to use variables in c called pointers. pointers allow us to see exactly where something is in memory, I.e. its place on our shelf. Pointers give us an address. This is similar to a home address but it is simply a number. This number is an exact spot in our RAM where the \"thing\" we're looking at is located.\n\nOne note is that our array will use a bunch of these addresses so when we see the number from our pointer, that is just the start of where our array is located. Additionally, our drawers will have a certain address in memory where they start. These will be within our array. Each drawer will be a certain number between each other. This is determined by the type of thing we want to store in each drawer. Pointers get complicated fast, but all you need to know is that a pointer points to the start of an object. Well take a look below and create an array to store some numbers and see where they are located in memory.\n\n```C\n#include <stdio.h>\n\nint main()\n{\n    /* Here we create an array with 10 numbers in it, more specifically integers */\n    int ourArray[ 10 ]; \n    \n    /* here we are creating a pointer see. the * next to the word void? That * means this points to an address*/\n    void* pointerForOurArray = &ourArray; \n    \n    /* these numbers simply help us count in loops */\n    int i,j; \n    \n    /* printf(...) prints something, here it's the start of our array */\n    printf(\"our Array starts at: %d or %p in hexadecimal\\n\",pointerForOurArray,pointerForOurArray);\n    \n    /* bellow were setting or initializing the elements of array */         \n    for ( i = 0; i < 10; i++ ) {\n        /* setting the value an element */\n        ourArray[ i ] = i + 100; \n        \n    }\n    /* below were printing the value and address of each element */\n    for (j = 0; j < 10; j++ ) {\n        /* getting the address of our current element */\n        int* pointer = &ourArray[j];\n        /* printing the value and address of an element */\n        printf(\n        \"ourArray[%d] equals %d and it starts at address: %d or %p in hexadecimal\\n\",\n        j ,\n        ourArray[j] ,\n        pointer,\n        pointer\n        );\n        \n    }\n\n    return 0;\n}\n```\n\nThe code above will output something like this when run.\n\n```\n//our output when run\n$gcc -o main *.c\n$main\nour Array starts at: 695129184 or 0x7ffe296ed460 in hexadecimal\nourArray[0] equals 100 and it starts at address: 695129184 or 0x7ffe296ed460 in hexadecimal\nourArray[1] equals 101 and it starts at address: 695129188 or 0x7ffe296ed464 in hexadecimal\nourArray[2] equals 102 and it starts at address: 695129192 or 0x7ffe296ed468 in hexadecimal\nourArray[3] equals 103 and it starts at address: 695129196 or 0x7ffe296ed46c in hexadecimal\nourArray[4] equals 104 and it starts at address: 695129200 or 0x7ffe296ed470 in hexadecimal\nourArray[5] equals 105 and it starts at address: 695129204 or 0x7ffe296ed474 in hexadecimal\nourArray[6] equals 106 and it starts at address: 695129208 or 0x7ffe296ed478 in hexadecimal\nourArray[7] equals 107 and it starts at address: 695129212 or 0x7ffe296ed47c in hexadecimal\nourArray[8] equals 108 and it starts at address: 695129216 or 0x7ffe296ed480 in hexadecimal\nourArray[9] equals 109 and it starts at address: 695129220 or 0x7ffe296ed484 in hexadecimal\n```\nIf you want to run this code yourself you can find it <a href=\"http://tpcg.io/pvfMclB3\" target=\"_Blank\">here</a>.\n\nAs we can see each element in our array has a specific address. I have included its number in memory in both decimal(our number system counting using 10 numbers) and hexadecimal (using 16 numbers). Don't worry if the hexadecimal is confusing, as you dig deeper and deeper into computer science and coding you'll see that hex is just an easy way to represent numbers the way the computer sees them. For our purposes just notice that each address changes by 4 for each element. This is what we were talking about earlier by setting the type of the array. When we do this we're telling the computer hey I need 4 bytes of space to store one of these things.\n\nNow that we know what arrays are, let’s talk about what they are used for. Arrays are used everywhere in programming. They are a fundamental data structure and are used in even the most basic scripts. Arrays are great because they are indexed. Indexed means that each “thing” or element in the array gets a number associated with it. Usually, these numbers start at 0 and go up to one minus the size of the array(in our example 0 to 9 for our 10 elements). This indexing allows us to grab any one element very very quickly. Faster than many other data structures, as long as we know its index number. This makes arrays great if we have sorted or ordered data. Such as a list of names in alphabetical order or a set of thumb drives sorted by most space to least. They can also be helpful if we just want to access any one element from that array at a time. If we want to go through the whole array there may be better solutions.\n\nTo wrap things up, arrays are a type of data structure used to store sets to similar data. We can think of an array as a box with drawers.  Each drawer is a specific size to hold a specific type of item. In the computer, the array is a set of data at a specific address in memory. Each item or element has a specific address too. We want to use arrays when we have ordered data or when we want to access only one element from our array at a time rather than reading the whole thing. \n\nThe Arrays we have talked about do have some downfalls. The main being that we have to know how many elements were going to add at the time of creating the array. We cannot change the size of an array once created.  As you program more you may notice that some higher-level languages do allow for resizing and change of arrays. Next time we will speak about a data structure called a dynamic array. These are an array implementation that allows us to resize our array on the fly and add and remove elements as needed. \n"},"previous":null,"next":{"fields":{"slug":"/GettingP5ToWorkInGatsby/"},"frontmatter":{"title":"Getting P5 to work in Gatsby "}}},"pageContext":{"id":"5488c788-ae79-53fc-9659-55c591e35467","previousPostId":null,"nextPostId":"ffb4cefe-5708-55dd-9849-5e9db14a6633"}},"staticQueryHashes":["3649515864","712016698"]}